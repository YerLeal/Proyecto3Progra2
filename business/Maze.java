package business;

import domain.Block;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Yerlin Leal
 */
public class Maze {

    private Logica logica;
    private int size;

    public Maze() {
        this.logica = new Logica();
        this.size = this.logica.getSize();
    } // constructor

    public Block[][] getMaze(int difficulty) {
        int matrix[][] = getMatrix(difficulty);
        Block maze[][] = new Block[matrix.length][matrix[0].length];
        for (int i = 0; i < maze.length; i++) {
            for (int j = 0; j < maze[0].length; j++) {
                if (matrix[i][j] == 1) {
                    maze[i][j] = new Block(i, j, this.size, "floor");
                } else {
                    maze[i][j] = new Block(i, j, this.size, "wall");
                }
            }
        }
        return maze;
    } // getMaze

    private int[][] getMatrix(int difficulty) {
        switch (difficulty) {
            case 1: {
                int matrix[][] = 
                {{1, 0, 0, 0, 0, 0, 0, 0, 0}, 
                {1, 1, 1, 1, 1, 1, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 0, 0}, 
                {0, 1, 0, 1, 0, 1, 1, 1, 1}, 
                {0, 1, 0, 1, 0, 0, 1, 0, 1},
                {0, 1, 1, 1, 0, 0, 1, 0, 1}, 
                {0, 1, 0, 0, 0, 0, 0, 0, 1}, 
                {0, 1, 0, 1, 1, 1, 0, 0, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 1}, 
                {1, 1, 1, 1, 0, 1, 0, 1, 0},
                {1, 0, 0, 0, 0, 1, 0, 1, 0},
                {1, 0, 1, 1, 0, 1, 0, 0, 0},
                {1, 1, 1, 0, 0, 1, 1, 1, 1}, 
                {0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0}, 
                {1, 0, 1, 0, 1, 0, 1, 0, 1}, 
                {0, 1, 0, 1, 0, 1, 0, 1, 0}};
                return matrix;
            }
            case 2: {
                int matrix[][] = {{1, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 0, 1, 0, 1, 0, 0, 0, 1}, {1, 0, 1, 0, 1, 0, 1, 1, 1}, {1, 0, 1, 1, 1, 0, 1, 0, 1},
                {1, 0, 1, 0, 0, 0, 1, 0, 1}, {1, 0, 1, 0, 1, 1, 1, 0, 1}, {0, 0, 1, 0, 1, 0, 1, 1, 1},
                {1, 1, 1, 0, 1, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 1, 1, 1}, {1, 0, 1, 1, 1, 0, 1, 0, 1},
                {1, 0, 1, 0, 1, 0, 1, 0, 1}, {1, 1, 1, 0, 1, 1, 1, 0, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 1, 0, 1, 0, 1, 0, 1, 0}, {1, 0, 1, 0, 1, 0, 1, 0, 1}, {0, 1, 0, 1, 0, 1, 0, 1, 0}};
                return matrix;
            }
            case 3: {
                int matrix[][] = {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0},
                {1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}, {1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0},
                {1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                {1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1}, {1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1},
                {1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}, {1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1},
                {1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1}, {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0}, {0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1},
                {1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}, {1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0},
                {1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}, {1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0},
                {1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0}, {1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1},
                {1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1}, {1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}, {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}};
                return matrix;
            }
            default:
                return null;
        } // switch
    } // getMatrix

} // end class
